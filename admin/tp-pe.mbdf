{% from "common/macros.njk" import embed_topic, get_date with context %}

#### <span class="badge badge-success">PE</span> <span class="text-success">Overview</span>

<span id="pe-overview">

**Objectives:**
* The primary objective of the PE is to ==increase the rigor of project grading==. Assessing most aspects of the project involves an element subjectivity. As the project counts for a large percentage of the final grade, it is not prudent to rely on evaluations of tutors alone as there can be significant variations between how different tutors assess projects. That is why we collect more data points via the PE so as to minimize the chance of your project being affected by evaluator-bias.
* PE is also ==used to evaluate your manual testing skills, product evaluation skills, effort estimation skills== etc.
* Note that significant project components are ==not graded solely based on peer ratings==. Rather, PE data are cross-validated with tutors' grades to identify cases that need further investigation. When peer inputs are used for grading, they are usually combined with tutors' grades with appropriate weight for each. In some cases ratings from team members are given a higher weight compared to ratings from other peers, if that is appropriate.
* PE is ==not a means of _pitting you against each other_==. Developers and testers play for the same side; they need to push each other to improve the quality of their work -- not bring down each other.

**Grading**:
* Your performance in the practical exam will affect your final grade and your peers', as explained in [_Admin: Project Grading_]({{ baseUrl }}/admin/tp-grading.html) section.
* As such, we have put in measures to identify and ==penalize insincere/random evaluations==.
* Also see:

<div class="indented-level2">

{{ embed_topic("tp-grading-bugs.mbdf#bugCalculationNotes", "Admin " + icon_embedding + " tP Grading → Notes on how marks are calculated for PE", "3") }}
</div>
</span>

#### <span class="badge badge-success">PE</span> <span class="text-success">Preparation</span>

* It's similar to,
<div class="indented-level2">

<panel type="primary" header="PE-D Preparation" minimized>

<include src="tp-testing.mbdf#testingPreparations" var-pe_active_tab="1"/>
</panel>
</div>
<p/>

#### <span class="badge badge-success">PE</span> <span class="text-success">Phase 1: Bug Reporting</span>

<box type="important" icon=":fas-exclamation-circle:" seamless>

**PE Phase 1 will conducted under exam conditions. ==We will be following the [SoC's E-Exam SOP](https://mysoc.nus.edu.sg/academic/e-exam-sop-for-students/)==**, combined with the deviations/refinements given below. Any non-compliance will be dealt with similar to a non-compliance in the final exam.

* **Proctoring will be done via Zoom.** No admission if the following requirements are not met.
  * **You need two Zoom devices** (PC: chat, audio ~~video~~, Phone: video, ~~audio~~), unless you have an external web cam for your PC.
  * **Add your `[PE_seat_number]` in front of the _first name_ of your Zoom display name**, in your Zoom devices. ==Seat numbers can be found in [here](https://docs.google.com/spreadsheets/d/e/2PACX-1vSUbcJpMC5OdJkr_K6VxDwAkkrwJsqAFSPwHmZq88EbOdAWIPMeYvDQDYOUEcsEYVwACmAz5hH0W0ZY/pubhtml?gid=0&single=true)==. e.g.,
    * `[M48] John Doe` (`M18` is the seat number)
    * `[M48][PC] John Doe` (for the PC, if using a phone as well)
  * **Set your camera** so that _all_ the following are visible:
    * your head (side view)
    * the computer screen
    * the work area (i.e., the table top)<br>
    <img src="images/zoomCameraExample.png" width="362"/>
* **Join the Zoom waiting room ==15-30 minutes before the start time==.** Admitting you to the Zoom session can take some time.
* **In case of Zoom outage**, we'll fall back on MS Teams (MST). Make sure you have MST running and have joined the matching MST Team `CS2103_AY2021S1_12pm_lecture` or `CS2103_AY2021S1_4pm_lecture`.
* **Recording the screen is not required.**
* **You are allowed to use head/ear phones.**
* **Only one screen is allowed.**
* **Do not use the public chat channel to ask questions** from the prof. If you do, you might accidentally reveal which team you are testing.
* **Do not use more than one CATcher instance** at the same time. Our grading scripts will red-flag you if you use multiple CATcher instances in parallel.
* **Use MS Teams (not Zoom) private messages to communicate with the prof.** Fall back on Zoom chat only if you didn't receive a reply via MST.
* **Do not view video Zoom feeds of others** while the testing is ongoing. Keep the video view minimized.
* **During the bug reporting periods (i.e., <span class="badge badge-success">PE Phase 1 - part I</span> and <span class="badge badge-success">PE Phase 1 - part II</span>), do not use websites/software not in the list given below.** ==In particular, do not visit GitHub==. However, you are allowed to visit pages linked in the UG/DG for the purpose of checking if the link is correct. If you need to visit a different website or use another software, please ask for permission first.
  * Website: LumiNUS
  * Website: Module website %%(e.g., to look up PE info)%%
  * Software: CATcher, any text editor, any screen grab software
  * Software: PDF reader %%(to read the UG/DG or other references such as the textbook)%%
* **Do not use any other software running** in the background e.g., telegram chat
* **This is a _manual_ testing session**. Do not use any test automation tools or custom scripts.

</box>


* **When, where**: Week 13 lecture slot. Use the same Zoom link used for the regular lecture.

##### <span class="badge badge-success">PE Phase 1 - Part I</span> <span class="text-success">Product Testing [60 minutes]</span>

**Test the product and report bugs** as described below. You may report both product bugs and documentation bugs during this period.

<include src="tp-ped.mbdf#tp-pe-testing-instructions" var-pe_active_tab="1"/>


##### <span class="badge badge-success">PE Phase 1 - Part II</span> <span class="text-success">Evaluating Documents [30 minutes]</span>

* **This slot is for reporting documentation bugs only**. You may report bugs related to the UG and the DG.
* **For each bug reported, cite evidence and justify.** For example, if you think the explanation of a feature is too brief, explain what information is missing and why the omission hinders the reader.

{{ embed_topic("tp-grading-bugs.mbdf#ugBugs", "Admin " + icon_embedding + " tP Grading → **Possible UG Bugs**", "3", indent="2") }}
{{ embed_topic("tp-grading-bugs.mbdf#dgBugs", "Admin " + icon_embedding + " tP Grading → **Possible DG Bugs**", "3", indent="2") }}
<p/>

##### <span class="badge badge-success">PE Phase 1 - Part III</span> <span class="text-success">Overall Evaluation [15 minutes]</span>

* To be submitted via TEAMMATES. You are recommended to complete this during the PE session itself, but ==you have until the end of the day to submit (or revise) your submissions==.

<div class="indented">
<box>

##### **Important questions included in the evaluation:**

<div id="projectGrading-featureFit-instructions">

{{ icon_green_Q }} **Quality of the product design,**<br>
Evaluate based on the User Guide and the actual product behavior.

 Criterion | Unable to judge | Low | Medium | High
-----------|-----------------|-----|--------|-----
`target user` | Not specified | | | Clearly specified and narrowed down appropriately
`value proposition`| Not specified | The value to target user is low. App is not worth using | Some small group of target users might find the app worth using | Most of the target users are likely to find the app worth using
`optimized for target user` | | Not enough focus for CLI users | Mostly CLI-based, but cumbersome to use most of the time | Feels like a fast typist can be more productive with the app, compared to an equivalent GUI app without a CLI
`feature-fit` | | Many of the features don't fit with others | Most features fit together but a few may be possible misfits | All features fit together to for a cohesive whole
</div>
<p/>
<div id="projectGrading-userGuide-instructions">

{{ icon_green_Q }} **Compared to AddressBoook-Level3 (AB3), the overall quality of the UG you evaluated is,**<br>
Evaluate based on fit-for-purpose, from the perspective of a target user.
For reference, the AB3 UG is [here]({{ url_ab3_upstream_website }}/UserGuide.html).<br>

- ( )  Significantly lower
- ( )  Slightly lower
- ( )  Similar
- ( )  Higher

</div>
<p/>
<div id="projectGrading-devGuide-instructions">

{{ icon_green_Q }} **Compared to AB3, the overall quality of the DG you evaluated is,**<br>
Evaluate based on fit-for-purpose from the perspective of a new team member trying to understand the product's internal design by reading the DG.
For reference, the AB3 DG is [here]({{ url_ab3_upstream_website }}/DeveloperGuide.html).<br>

- ( )  Significantly lower
- ( )  Slightly lower
- ( )  Similar
- ( )  Higher

</div>
<p/>
<div id="projectGrading-effort-instructions">

<div tags="m--cs2103">

{{ icon_green_Q }} **If the implementation effort required to create AB3 from scratch is 10, the estimated implementation effort of this team is,** [`0`..`20`] e.g., if you give `8`, that means the team's effort is about 80% of that spent on creating AB3. We expect most typical teams to score near to `10`.
* Do read the DG appendix named `Effort`, if any.
* ==Consider implementation work only (i.e., exclude testing, documentation, project management etc.)==
* Do not give a high value just _to be nice_. ==Your responses will be used to evaluate your effort estimation skills.==
</div>
<div tags="m--cs2113 m--tic4001">

{{ icon_green_Q }} **[For each member] The functional code contributed by the person is,**<br>
==Consider implementation work only (i.e., exclude testing, documentation, project management etc.)==<br>
The _typical iP_ refers to an iP where all the requirements are met at the minimal expectations given.<br>
Use the person's PPP and RepoSense page to evaluate the effort.

- ( )  Unable to judge
- ( )  Significantly less than a typical iP
- ( )  Slightly less than a typical iP
- ( )  At least as much as a typical iP
</div>

</div>

{{ icon_green_Q }} **[Optional] Concerns or any noteworthy observations about the product you evaluated**

</box>
</div>

#### <span class="badge badge-success">PE</span> <span class="text-success">Phase 2: Developer Response</span>

==**Deadline:** {{ get_date(date_w13_start, 11) }}==

This phase is for you to respond to the bug reports you received.

Duration: The review period will start around 1 day after the PE (exact time to be announced) and will last for 2-3 days. However, you are recommended to finish this task ASAP, to minimize cutting into your exam preparation work.

Bug reviewing is recommended to be done as a team as some of the decisions need team consensus.

<box>

**Instructions for Reviewing Bug Reports**

* **Don't freak out if there are lot of bug reports.** Many can be duplicates and some can be _false positives_. In any case, we anticipate that all of these products will have some bugs and our penalty for bugs is not harsh. Furthermore, it depends on the severity of the bug. Some bug may not even be penalized.

<tabs>
<tab header="Using CATcher">

<box type="info" icon=":fas-hard-hat:">

* CATcher does not come with a UG, but the UI is fairly intuitive (there are tool tips too). Do post in the forum if you need any guidance with its usage.
* Also note that CATcher hasn't been battle-tested for this phase, in particular, w.r.t. multiple team members editing the same issue concurrently. It is ideal if the team members get together and work through the issues together. If you think others might be editing the same issues at the same time, use the `Sync` button at the top to force-sync your view with the latest data from GitHub.
</box>
* Launch CATcher, and login to the profile `{{ module }}/T PE`. It will show all the bugs assigned to your team, divided into three sections:
  1. `Issues Pending Responses` - Issues that your team has not processed yet.
  1. `Issues Responded` - Your job is to get all issues to this category.
  1. `Faulty Issues` - e.g., Bugs marked as duplicates of each other, or causing circular _duplicate_ relationships. Fix the problem given so that no issues remain in this category.
* Respond to the bug reports shown.
</tab>
<tab header="Not using CATcher">
<div class="indented-less">

<markdown>
<span id="warning-use-catcher">

<box type="wrong">

**You must use CATcher. You are strictly prohibited from editing PE bug reports using the GitHub Web interface** as it can can render bug reports unprocessable by CATcher, sometimes in an irreversible ways, and can affect the entire class. Please contact the prof if you are unable to use CATcher for some reason.
</box>
</span>

<!--
* Go to the [dev-response issue tracker]({{ url_module_org }}/pe-dev-response)
* Use `tutorial.*` and `team.*` labels to filter bug reports your team received.
* **Do not edit the subject or the description.** Your response (if any) should be added as a comment.
* Add a comment using the following exact template.
```markdown
# Team's Response
{replace this with your response}

## Duplicate status (if any):

```
Here is an example:
```markdown
# Team's Response

Yes this is a bug. But it is a duplicate.
* Changed the bug type because this is just a bug in the UG.
* Lowered the severity because users can still use the feature.

## Duplicate status (if any):
Duplicate of #67
```
* Do not close the bug report after you are done processing it.
* Use the exact `Duplicate of #123` format to indicate duplicates.
* There should be exactly one comment per issue. If there are multiple comments, the last one will be taken for processing.
</markdown>
</div>
-->

</tab>
</tabs>
<p/>

* **If a bug seems to be for a different product** (i.e. wrongly assigned to your team), let us know ASAP.
* **If the bug is reported multiple times**,
  * Mark <span class="text-danger">all copies ==EXCEPT one==</span> as duplicates of the one left out (let's call that one the _original_) using the :fas-check-square: `A Duplicate of` tick box.
  * For each group of duplicates, all duplicates should point to one _original_ i.e., no multiple levels of duplicates, and no cyclical duplication relationships.
  * If the duplication status is eventually accepted, all duplicates will be assumed to have inherited the `type.*` and `severity.*` from the _original_.
<p/>

* **Apply one of these labels** (if missing, we assign: `response.Accepted`)

<div class="indented">
<box>

**Response** Labels:
* `response.Accepted`: You accept it as a bug.
* `response.NotInScope`: It is a valid issue but not something the team should be penalized for %%e.g., it was not related to features delivered in {{ version_final }}%%.
* `response.Rejected`: What tester treated as a bug is in fact the expected behavior, or the tester was mistaken in some other way.
* `response.CannotReproduce`: You are unable to reproduce the behavior reported in the bug after multiple tries.
* `response.IssueUnclear`: The issue description is not clear. Don't post comments asking the tester to give more info. The tester will not be able to see those comments because the bug reports are anonymous.

</box>
</div>


* **Apply one of these labels** (if missing, we assign: `type.FunctionalityBug`)

<div class="indented" id="type-labels">
<box>

**Type** labels:
* `type.FunctionalityBug`: A functionality does not work as specified/expected.
* `type.FeatureFlaw`: Some functionality missing from a feature delivered in {{ version_final }} in a way that the feature becomes less useful to the intended target user for _normal_ usage. i.e., the feature is not 'complete'. In other words, an acceptance-testing bug that falls within the scope of {{ version_final }} features. These issues are counted against the _product design_ aspect of the project.
* `type.DocumentationBug`: A flaw in the documentation %%e.g., a missing step, a wrong instruction, typos%%
</box>
</div>

* **If you disagree with the original severity assigned to the bug**, you may change it to the correct level.

<div class="indented">
<include src="appendixE-gitHub.md#bug-severity" />
</div>

* **If you need the teaching team's inputs when deciding on a bug** %%(e.g., if you are not sure if the UML notation is correct)%%, post in the [forum]({{ url_forum }}). Remember to ==quote the issue number shown in CATcher== (it appears at the end of the issue title).

<div class="indented-level2" id="additionalGuidelinesForBugTriaging">

<box type="info" header="**Some additional guidelines for bug triaging:**">

* **Broken links in UG/DG**: Severity can be low or medium depending on how many such cases and how much inconvenience they cause to the reader.
* **UML notation variations** caused by the diagramming tool: Can be rejected if not contradicting the standard notation (as given by the textbook) i.e., extra decorations that are not misleading.<br>
    If the same problem is reported for multiple diagrams, can be flagged as duplicates.<br>
    Omitting optional notations is not a bug as long it doesn't hinder understanding.
* **Minor typos and grammar errors**: These are still considered as `severity.VeryLow` `type.DocumentationBug` bugs (even if it is in the actual UI) which carry a very tiny penalty.
* **How to prove that something is 'not in scope'**: In general, features not-yet-implemented (and hence, not in scope) are the features that have a lower priority that the ones that are implemented already. In addition, the following (at least one) can be used to prove that a feature was left out deliberately because it was _not in scope_:
  * The UG specifies it as not supported or coming in a future version.
  * The user cannot attempt to use the missing feature or when the user does so, the software fails gracefully, possibly with a suitable error message i.e., the software should not crash.
* **If a missing feature is essential for the app to be reasonably useful**, its omission can be considered a _feature flaw_ even if it can be proven as _not in scope_ as given in the previous point.
* **If a bug report contains multiple bugs** (i.e., despite instructions to the contrary, a tester included multiple bugs in a single bug report), you have to choose one bug and ignore the others. If there are valid bugs, choose from valid bugs. Among the choices available, choose the one with the highest severity (in your opinion). In your response, mention which bug you chose.
* **How to decide the severity of bugs related to _missing requirements_** (e.g., missing user stories)? Depends on the potential damage the omission can cause. Keep in mind that not documenting a requirement increases the risk of it not getting implemented in a timely manner (i.e., future developers will not know that feature needs to be implemented).
* **You can reject bugs that you <tooltip content="i.e., the current behavior is same as AB3 and you had no reason to change it because the feature applies similarly to your new product">inherited</tooltip> from AB3.**
</box>
</div>

* **Decide who should fix the bug**. Use the `Assignees` field to assign the issue to that person(s). There is no need to actually fix the bug though. It's simply an indication/acceptance of responsibility. **If there is no assignee, we will distribute the penalty for that bug (if any) among all team members.**
  * If it is not easy to decide the assignee(s), we recommend (but not enforce) that the feature owner should be assigned bugs related to the feature, Reason: The feature owner should have defended the feature against bugs using automated tests and defensive coding techniques.
<p/>

* As far as possible, ==**choose the correct `type.*`, `severity.*`, `response.*`, assignees, and duplicate status even for bugs you are not accepting or marking as duplicates**==. Reason: your _non-acceptance_  or duplication status may be rejected in a later phase, in which case we need to grade it as an accepted/non-duplicate bug.

* **Justify your response.** For all of the following cases, ==you must add a comment justifying your stance==. Testers will get to respond to all those cases and will be double-checked by the teaching team in later phases. ==<span class="text-danger">Indiscriminate/unreasonable dev/tester responses, if deemed as a case of trying to _game the system_, will be penalized.</span>==
  * downgrading severity
  * non-acceptance of a bug
  * changing the bug type
  * non-obvious duplicate

<p/>
</box>

* You can also refer to the below guidelines:

{{ embed_topic("tp-grading-bugs.mbdf#bugCalculationNotes", "Admin " + icon_embedding + " tP Grading → Grading bugs found in the PE", "pe-gradingBugsFoundInPe", 2, indent=2) }}

#### <span class="badge badge-success">PE</span> <span class="text-success">Phase 3: Tester Response</span>

**Start:** Within 1 day after Phase 2 ends.<br>

<div class="indented">

{{ icon_important_big_red }} While you are waiting for Phase 3 to start, comments will be added to the bug reports in your `/pe` repo, to indicate the response each received from the receiving team. <span class="text-danger">Please do not edit any of those comments or reply to them via the GitHub interface.</span> Doing so can invalidate them, in which case the grading script will assume that you agree with the dev team's response. Instead, wait till the start of the Phase 3 is announced, after which you should use CATcher to respond.
</div>

==**Deadline:** {{ get_date(date_w13_start, 14) }}==

* In this phase you will get to state whether you agree or disagree with the dev team's response to the bugs you reported. If a bug reported has been subjected to any of the below by the receiving dev team, you can record your objections and the reason for the objection.
  * not accepted
  * severity downgraded
  * bug type changed
* As before, consider carefully before you object to a dev team's response. ==<span class="text-danger">If many of your objections were overruled by the teaching team later</span>==, you will lose marks for not being able to evaluate a bug report properly.
* If you disagree with the team's decision but would like to revise your own initial type/severity/response as well, you can state that in your explanation %%e.g., you rated the bug `severity.High` and the team changed it to `severity.Low` but now you think it should be `severity.Medium`%%.
* You can also refer to the below guidelines:

{{ embed_topic("tp-pe.mbdf#additionalGuidelinesForBugTriaging", "Admin " + icon_embedding + " PE → Phase 2 → Additional Guidelines for Bug Triaging", "pe-additionalGuidelinesForBugTriaging", 2, indent=2) }}

{{ embed_topic("tp-grading-bugs.mbdf#bugCalculationNotes", "Admin " + icon_embedding + " tP Grading → Grading bugs found in the PE", "pe-gradingBugsFoundInPe", 2, indent=2) }}


* This phase is optional. If you do not respond to a dev response, we'll assume that you agree with it.
* Procedure:

<div class="indented-level2">

<tabs>
<tab header="Using CATcher">

* When the phase has been announced as open, login to CATcher as usual (profile: `{{ module }}/T PE`).<br>
  {{ icon_info }} You may use [the latest version of CATcher](https://github.com/CATcher-org/CATcher/releases) or the [Web version of CATcher](http://catcher-org.github.io/webapp).
* For each issues listed in the `Issues Pending Responses` section:,
  * Go to the details, and read the dev team's response.
  * If you disagree with any of the items listed, tick on the `I disagree` tick box and enter your justification for the disagreement, and click `Save`.
  * If you are fine with the team's changes, click `Save` without any other changes upon which the issue will move to the `Issue Responded` section.
* Note that only bugs that require your response will be shown by CATcher. **Bugs already accepted _as reported_ by the team will not appear in CATcher** as there is nothing for you to do about them.

</tab>
<tab header="Not using CATcher">

<div class="indented-less">

<markdown>
<include src="tp-pe.mbdf#warning-use-catcher" />

<!--
* When the phase has been announced as open, go to your `pe` repo.
* For the issues listed, go to the details, and read the bot's comment containing the team's response.
* If you disagree with any of the items listed in that comment, tick on the `[ ] I disagree` tick box. ==Edit the comment (do not add a new comment)== to replace the `[replace this with your reason]` with your reasoning. Here is an example:<br>
</markdown>

```
Team chose ['response.IssueUnclear']

- [x] I disagree

**Reason for disagreement:** I think one can easily reproduce the problem by following the steps I gave.
```
</div>
-->
</tab>
</tabs>
</div>


#### <span class="badge badge-success">PE</span> <span class="text-success">Phase 4: Tutor Moderation</span>

* In this phase tutors will look through all dev responses you objected to in the previous phase and decide on a final outcome.
* In the unlikely case we need your inputs, the tutor will contact you.
