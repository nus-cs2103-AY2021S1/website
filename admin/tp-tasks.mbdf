{% from "common/admin.njk" import show_admin_page with context %}
{% from "common/macros.njk" import button, embed_topic, show_as_tab, show_as_rounded_tab, thumb, timing_badge with context %}
{% from "admin/ip-tasks.mbdf" import show_xp_page  with context %}
{% from "_module-" + module + "/weeklyTpTasks.mbdf" import weekly_tp_tasks  with context %}
{% from "_module-" + module + "/studentData.mbdf" import tp_dg_review_allocation with context %}
{% from "common/topics.njk" import panopto, slugify, topic_followup, topic_preamble with context %}


{#====================================================================================================================
 # CS2103 Weekly Intros
 #====================================================================================================================#}
<span id="cs2103-week4-intro">

</span>
{#====================================================================================================================#}
<span id="cs2103-week6-intro">

<box dismissible>

{{ icon_individual }} indicates an individual task %%(i.e., each team member has to do the task, graded individually)%% while {{ icon_team }} indicates a team task %%(some or all members may do the work; graded for the whole team)%%.

{{ icon_important_big_red }} **tP tasks progress is graded**. Completing individual and team tasks are considered for grading the _project management_ component of your project grade.

{{ embed_topic("tp-grading.md#project-management-grading", "Admin " + icon_embedding + " tP → Grading → Project Management", "3", indent="1") }}

{{ icon_important_big_red }} **Most aspects of project progress are tracked using automated scripts.** ==Please follow our instructions closely or else the script will not be able to detect your progress==. We prefer not to waste admin resources processing requests for partial credit for work that did not follow the instructions precisely, unless the progress was not detected due to a bug in the script.

<span id="milestoneCumulative">

{{ icon_important_big_red }} **Milestone requirements are cumulative**. The recommended progress for the mid-milestone is an implicit requirement for the actual milestone unless a milestone requirement overrides a mid-milestone requirement %%e.g., mid-milestone requires a document to be in a temp format while the actual milestone requires it to be in the proper format%%. Similarly, a requirement for milestone `n` is also an implicit requirement for milestone `n+1` unless `n+1` overrides the `n` requirement. This means ==if you miss some requirement at milestone `n`, you should try to achieve it before milestone `n+1`== or else it could be noted again as a 'missed requirement' at milestone `n+1`.
</span>
</box>
</span>
{#====================================================================================================================#}
<span id="cs2103-week8-intro">

<box>

**Reminder:**

<include src="tp-tasks.mbdf#milestoneCumulative" />
</box>

{{ embed_topic("tp-supervision.md#making-project-decisions", "Admin " + icon_embedding + " tP → Supervision (Extract) → **Tutor's role in making project decisions**", "3", indent="1") }}

</span>

{#====================================================================================================================#}
<span id="cs2103-week12-intro">

<box dismissible>

{{ icon_tip }} when setting the {{ version_final }} deadline in GitHub milestones, remember that the {{ version_final }} submission deadline is Week 13 Monday for _everyone_ (does not vary by tutorial day). Set your own milestone deadline accordingly, or else our grading scripts will flag it as an 'unsuitable' deadline.
</box>

<box background-color="white" border-color="red">

**Remind yourself of the project grading criteria:**

<panel type="seamless" src="tp-grading.md#main" header="%%Admin {{ icon_embedding }} tP → Grading%%" class="embedding" />
</box>
</span>
{#====================================================================================================================
 # CS2113 Weekly Intros
 #====================================================================================================================#}
<span id="cs2113-week4-intro">

<box>

{{ icon_important_big_red }} Timely completion of the weekly tP tasks can improve the _project management_ component of your tP grade.

{{ embed_topic("tp-grading.md#project-management-grading", "Admin " + icon_embedding + " tP → Grading → Project Management", "3", indent="1") }}


</box>
</span>
{#====================================================================================================================#}
<span id="cs2113-week10-intro">

{% call topic_preamble(reuse=false) %}
Some things to note as you start the {{ version_penultimate }} iteration:
* **Set moderate targets for functionality.** Adding more functionality than needed will not earn you more marks but can expose you to higher risk of bugs.<br>
  **Focus on improving the process and the quality** instead.
* **Move in small steps, and keep the product working at each step.** If it breaks, you will only have to examine the latest change for the cause of the breakage.
{% endcall %}
</span>

{#====================================================================================================================#}
<span id="cs2113-week11-intro">

{% call topic_preamble(reuse=false) %}
==This week, you get a chance to fix your tP bugs (in the project, as well as documentation) without any penalty.== What's more, others will help you find those bugs (via tutorial activities and the PE Dry Run happening in this week).

To take advantage of the above, try to make your {{ version_penultimate }} (product, DG, and UG) as close to what you intend to submit as your final version (i.e., {{ version_final }}).
{% endcall %}
</span>

{#====================================================================================================================#}
{# Steps
{#====================================================================================================================#}
<span id="heading_get_familiar_with_ab3">{{ icon_individual }} Get familiar with AB3 features</span>
<span id="desc_get_familiar_with_ab3">

* **Familiarize yourself with AB3**: Download the latest released version %%(i.e., the jar file)%% of AB3 from [its upstream repo](https://se-edu.github.io/addressbook-level3/UserGuide.html) and play around with it to familiarize with its current features.
</span>
{#====================================================================================================================#}
<span id="heading_set_up_meeting_time">{{ icon_team }} Set up a project meeting time</span>
<span id="desc_set_up_meeting_time">

* After forming teams, **set up a weekly project meeting time/venue (and communication channels) with your team members**:

{{ embed_topic("tp-teams.md#teamCommunication", "Admin " + icon_embedding + " **Teams → Communication**", "2", indent="2") }}
</span>
{#====================================================================================================================#}
<span id="heading_start_weekly_meetings">{{ icon_team }} Start weekly project meetings</span>
<span id="desc_start_weekly_meetings">

* We recommend you start weekly project meetings now. You can use the meeting to do tP tasks, but also help each other do iP tasks. On a related note, ==it is also acceptable to discuss weekly post-lecture quiz (if any) together with team members as you do the quiz== i.e., discuss and decide the answer collectively, but you should not give away your answers to someone who was not part of that discussion.
</span>
{#====================================================================================================================#}
<span id="heading_decide_project_direction">{{ icon_team }} Decide on an overall project direction %%(user profile, problem addressed)%%</span>
<span id="desc_decide_project_direction">

* **Decide project direction, target user profile, and problem addressed**: Use your first project meeting to discuss with your team members and decide your project direction, target user profile, and the value proposition of the product, as described in the panels below:

<div class="indented">

<box type="warning" seamless>

As we are still at the early stages of identifying a problem to solve, do not think of the product (i.e., the _solution_) yet. That is, ==do not discuss the product features, UI, command format, and implementation details, etc.== unless they are pertinent to the decision of the project direction.
</box>
</div>

{{ embed_topic("tp-expectations.md#main", "Admin " + icon_embedding + " **tP: Expectations**", "3", indent="2") }}
{{ embed_topic("tp-constraints.md#main", "Admin " + icon_embedding + " **tP: Constraints**", "3", indent="2") }}
{{ embed_topic("tp-grading.md#criteria-productDesign", "Admin " + icon_embedding + " **tP: Grading → ==Criteria Used for Grading the Product Design==**", "3", indent="2") }}

* <span class="text-danger">**Submission**:</span> Submit your product name, target user profile, the value proposition, and the public link to your collaborative project notes via TEAMMATES. You'll receive an email from TEAMMATES with the submission link. Only one member needs to submit on behalf of the team. All members can view/update the submission.{% if cs2103 or tic4001 %}<br>
  {{ icon_info }} Submission link will be sent to you by {{ date_w4_start | date(format_normal, 3) }} %%(reason: we need a few days to set up the submission system _after_ teams have been finalized)%%.{% endif %}


</span>
{#====================================================================================================================#}
<span id="heading_start_project_notes">{{ icon_team }} Start a collaborative doc to take project notes</span>
<span id="desc_start_project_notes">

* Keep project notes in easy-to-use collaborative docs (Recommended: use a GoogleDoc). This document will be checked by the tutor at various points.<br>
  Remember to choose a tool that ==allow public _view_ access== (not write access) e.g., GoogleDoc can be shared via a public link so that the document can be viewed by others. You'll be asked to submit this link to us in the next week.<br>
  {{ icon_important_big_red }} Make sure all you current and future project notes (if split into in multiple documents) are reachable via links given in this document and are viewable by the public.

</span>
{#====================================================================================================================#}
<span id="heading_brainstorm_user_stories">{{ icon_team }} Brainstorm user stories</span>
<span id="desc_brainstorm_user_stories">

  <img class="indented-level2" src="{{baseUrl}}/admin/images/v00.png" width="250px">

<div class="indented-level1">


* **Learn** [**the _recipe for brainstorming user stories_** in the textbook → Specifying Requirements → UserStories →  Usage]({{ baseUrl }}/se-book-adapted/chapters/specifyingRequirements.html#a-recipe-for-brainstorming-user-stories).<br>
  Also learn about <trigger trigger="click" for="modal:v10-brainstorming">brainstorming</trigger> and <trigger trigger="click" for="modal:v10-userstories">user stories</trigger>.

* **Follow the steps in the recipe mentioned above to arrive at user stories for the the product**, with your team members. <span tags="m--cs2103">If you didn't attend the lecture, please watch the lecture recording to learn more about this step.</span>

* **How many user stories?** Aim to collect more user stories than you can deliver in the project. %%Aim to create at least 30 user stories. Include all 'obvious' ones you can think of but also look for 'non obvious' ones that you think are likely to be missed by other competing products.%%

* **User stories of what size?** Normally, it is fine to use _epic_-level user stories in the early stages of a project but given this is a small project, you may want to define smaller user stories (i.e., small enough for one person to implement in 1-2 days).
  * {{ bad }} As a user, I can track my schedule, so that I can know when to do things.<br>
    %%Reason: too big, as _track_ can involve a lot of things.%%
  * {{ good }} As a user, I can add a time to a task, so that I can record when a task need to be done.
  * {{ good }} As a user, I can see the pending task that has the next earliest deadline, so that I can know what I need to do next.

* **What format?**: You may use a sentence format or a table format but do maintain the prescribed three-part structure of a user story. In particular, ==try to include the _benefit_ part in most user stories== as that will come in handy when prioritizing user stories later.

* **How to record?**<br>
  ==Keep records of intermediate steps (e.g., persona, scenarios)== in your collaborative project document started in the previous week.<br>
  You can ~~write each user story in a piece of paper (e.g. yellow sticky note, index card, or just pieces of paper about the size of a playing card). Alternatively you can~~ use an online tool (some examples given in <trigger trigger="click" for="modal:v10-onlinetools">[Textbook {{ icon_embedding }} Specifying Requirements → UserStories → Usage → (panel) Tool Examples ]</trigger>).

<modal large header="Textbook {{ icon_embedding }}" id="modal:v10-brainstorming">
  <include src="../book/gatheringRequirements/brainstorming/unit-inElsewhere-asFlat.md" boilerplate/>
</modal>

<modal large header="Textbook {{ icon_embedding }}" id="modal:v10-userstories">
  <include src="../book/specifyingRequirements/userStories/unit-inElsewhere-asFlat.md" boilerplate/>
</modal>

<modal large header="Textbook {{ icon_embedding }} Specifying Requirements → UserStories → Usage → (panel)Tool Examples" id="modal:v10-onlinetools">
  <include src="../book/specifyingRequirements/userStories/usage/tools.md"/>
</modal>


<div tags="m--cs2103" class="indented-level2">

{{ icon_tip }} **If you choose to use the GitHub issue tracker to manage user stories**, you need to set up your team's GitHub organization, team repo, and its issue tracker first. Instructions for doing those steps are in the panel below.

<panel header="%%Admin {{ icon_embedding }} Appendix E: GitHub (extract)%%">
  <include src="appendixE-gitHub.md#organization-setup"/>
  <include src="appendixE-gitHub.md#tp-team-repo-setup"/>
  <include src="appendixE-gitHub.md#issue-tracker-setup"/>
</panel>

</div>

</div>
</span>
{#====================================================================================================================#}
<span id="heading_prioritize_user_stories">{{ icon_team }} Choose user stories for {{ version_first }}</span>
<span id="desc_prioritize_user_stories">

<div class="indented">

<box type="success" seamless>

##### <span class="text-success">Project planning, with a twist</span>

Intuitively, you might think the right thing to do is to decide what features will be in {{ version_final }} and then plan the intermediate versions based on that. But that's not what we are going to do.

Why? Given the difficulty of reliably estimating the effort each feature will need, any such long-range plan is likely to be inaccurate.

Instead, what we will do is to ==assume the current iteration is the last iteration==, plan that iteration to deliver the product (based on available time), and try to follow that plan as best as we can. After the iteration is over, we plan the next iteration as if _it's_ the last iteration. But that time, you can factor in the experience from the previous iteration to do a better job of planning.

How is that better?
* Shorter-term plans have a better chance of being accurate and doable.
* You get multiple clean shots at project planning. Each try can learn from the previous tries. Hence, more learning.
* As each iteration produces a working product, you always have a working product, which practically eliminates the risk failing to deliver a working product by the final deadline.

</box>

**The goal of this activity is to come up with the _smallest possible product that is still usable_** so that it can be implemented as {{ version_first }}, to be delivered at the end of the first project iteration. We try to make it small because ==you will have only two weeks to implement {{ version_first }}== and coding as a team is a lot harder than writing code alone.

{{ icon_important_big_red }} Do not discuss features, UI, command format, or implementation details yet. That would be like _putting the cart before the horse_. At this stage we are simply trying to choose which user needs to fulfill first.

</div>

* If the product _can_ be of some use without a given user story, that user story should be left out of {{ version_first }}, even if the omission makes the product hard to use, as long as the product is not _impossible_ to use %%e.g., in most cases a product can be used without an 'edit item' feature because the user can always delete an item and add a new item instead of editing an existing an item%%.
* Don't worry about {{ version_penultimate  }}. You can design {{ version_penultimate }} after {{ version_first }} done.
* Don't worry about {{ version_first }} being 'too small'. You can always add more features to {{ version_first }} if you finish it ahead of schedule.<br>
  {{ icon_tip }} You can also select an additional set of user stories that are _nice-to-have_ in v1.2, to be done but only if there's time left.
* If possible, narrow the scope of {{ version_first }} further e.g., narrower target user, a smaller value proposition.

Suggested workflow:
* **First stage**:
  * Divide the user stories among team members.
  * Each member will go through their user stories to discard (e.g., cross out, or move to a different location, but not delete) which are _definitely not needed_ for {{ version_first }}.
* **Second stage**:
  * All members discuss the remaining user stories (i.e., the ones not discarded in the first stage), and try to trim the list further.
</span>
{#====================================================================================================================#}
<span id="heading_set_up_project_repo">{{ icon_team }} Set up the project repo</span>
<span id="desc_set_up_project_repo">

* Set up the team org, the team repo, and individual forks as explained below:

{{ embed_topic("appendixE-gitHub.md#organization-setup", "Admin " + icon_embedding + " Appendix E (extract): **tP Organization Setup**", "1", indent="2") }}
{{ embed_topic("appendixE-gitHub.md#tp-team-repo-setup", "Admin " + icon_embedding + " Appendix E (extract): **tP Team Repo Setup**", "1", indent="2") }}
{{ embed_topic("appendixE-gitHub.md#tp-individual-fork-setup", "Admin " + icon_embedding + " Appendix E (extract): **tP Individual Fork Setup**", "1", indent="2") }}
</span>
{#====================================================================================================================#}
<span id="heading_get_familiar_with_the_code_base">{{ icon_individual }} Get familiar with the code base</span>
<span id="desc_get_familiar_with_the_code_base">

* ==Ideally, you should do this task in this week== (i.e., midnight before the week 6 tutorial), but you may take an extra week (i.e., by the week 7 tutorial) to finish them without penalty.
* Do the following tutorials to get familiar with the codebase
  * [Tutorial 1 - Tracing a Command Execution Path]({{ url_ab3_fork_website }}/tutorials/TracingCode.html)
  * [Tutorial 2 - Removing a field from an entity]({{ url_ab3_fork_website }}/tutorials/RemovingFields.html)
    * If you are an experienced programmer, you can remove a different field than the one given in the tutorial.
    * Submission: Do your changes in a branch named `tutorial-removing-field` and push to your fork.
  * [Tutorial 3 - Adding a new Command]({{ url_ab3_fork_website }}/tutorials/AddRemark.html)
    * If you are an experienced programmer, you can add a different command than the one given in the tutorial.
    * Submission: Do your changes in a branch named `tutorial-adding-command`, push to your fork, and create a PR from your fork to your team's repo.
* The PRs created for tutorials need not be merged, unless the changes are actually in line with your project idea.
* For reference, given below is the workflow you should follow when merging code in your tP:

{{ embed_topic("appendixE-gitHub.md#workflow", "Admin " + icon_embedding + " Appendix E(extract): **Workflow**", "1", indent="2") }}
</span>
{#====================================================================================================================#}
<span id="heading_conceptualize_first_version">{{ icon_team }} Conceptualize {{ version_first }}</span>
<span id="desc_conceptualize_first_version">

* Based on your user stories selected previously, conceptualize the product in terms of how it will look like at {{ version_first }} ==in the form of a <trigger trigger="click" for="modal:v10-featureLists">feature list</trigger>==.<br>
  Note down the feature list in your online project notes document.

<modal large header="Textbook {{ icon_embedding }}" id="modal:v10-featureLists">
  <include src="../book/specifyingRequirements/featureList/what/unit-inElsewhere-asFlat.md" boilerplate/>
</modal>

</span>
{#====================================================================================================================#}
<span id="heading_draft_the_ug">{{ icon_individual }} Draft the UG</span>
<span id="desc_draft_the_ug">

* Draft a user guide in a convenient medium (e.g., a GoogleDoc) to describe what the product would be like when it is at {{ version_first }}.
  * We recommend that you follow the [AB3 User Guide]({{ url_ab3_upstream_website }}/UserGuide.html) in terms of structure and format.
  * As this is a very rough draft and the final version will be in a different format altogether %%(i.e., in Markdown format)%%, don't waste time in formatting, copy editing etc. It is fine as long as the tutor can get a rough idea of the features from this draft. You can also do just the 'Features' section and omit the other parts.
  * Do try to come up with concrete command syntax for the CLI commands that you will deliver at {{ version_first }}.
  * Include only features that will be delivered in {{ version_first }}.
  * <span tags="m--cs2103">Consider including some UI mock-ups too %%(they can be hand-drawn or created using a tool such as PowerPoint, PlantUML or [Balsamiq](https://balsamiq.com/))%%</span><span tags="m--cs2113 m--tic4001">Consider including examples of expected outputs too</span>.
  * {{ icon_important_big_red }} **Submission** [one person per team]: Save the draft UG as a PDF file, name it `{team-id}.pdf` e.g., `{{ example_team_id }}.pdf`, and upload to LumiNUS.<br><br>

<div id="divideDocs" class="indented">

  <box>

  {{ icon_tip }} Recommended: **Divide <tooltip content="i.e., work related to the User Guide and the Developer Guide">documentation work</tooltip> among team members equally; preferably based on enhancements/features each person would be adding** %%e.g., If you are the person planing to add a feature X, you should be the person to describe the feature X in the User Guide and in the Developer Guide%%.

  %%Reason: In the final project evaluation your documentation skills will be graded based on sections of the User/Developer Guide you have written.%%

  {{ embed_topic("tp-grading.md#criteria-documentation", "Admin " + icon_embedding + " **tP: Grading → ==Documentation==**", "3") }}
   
  </box>
</div>
</span>
{#====================================================================================================================#}
<span id="heading_refine_product_design">{{ icon_team }} Refine the product design</span>
<span id="desc_refine_product_design">

* Review the UG to ensure the features written by each member fit together to form a cohesive product. Note that cohesiveness of the product can affect the grading of the _product design_ aspect.

{{ embed_topic("tp-grading.md#criteria-productDesign", "Admin " + icon_embedding + " **tP: Grading → ==Product Design==**", "3", indent="2") }}

</span>
{#====================================================================================================================#}
<span id="heading_update_website_aboutus_readme">{{ icon_team }} Update project website: `AboutUs`, `README`</span>
<span id="desc_update_website_aboutus_readme">

<div class="indented-level1">

<box type="info" seamless>

**Recommended procedure for updating docs**:{.text-info}

1. Divide among yourselves who will update which parts of the document(s).
1. Update the team repo by following the recommended workflow.

{{ embed_topic("appendixE-gitHub.md#workflow-before-v11", "Admin " + icon_embedding + " Appendix E(extract): **Workflow**", "3") }}

</box>

Update the following pages in your project repo:
</div>

* **_AboutUs_ page**:
  This page (in the `/docs` folder) is used for module admin purposes. ==Please follow the format closely== or else our scripts will not be able to give credit for your work.
  * Add your own details. Include a ==suitable photo== as described <trigger trigger="click" for="modal:mid-v12-photo">here</trigger>.
  * Including the the supervisor/lecturer is optional.
  * The filename of the profile photo should be `doc/images/githbub_username_in_lower_case.png`<br>
    ==Note the need for lower case== (<tooltip content="GitHub usernames are not case sensitive, but URLs in GitHub-pages are -- to avoid any mismatches, we have fixed the file name here to be lower case">%%why lowercase?%%</tooltip>) %%e.g. `JohnDoe123` -> `docs/images/johndoe123.png`%%.<br>
    ==If your photo is in jpg format, name the file as `.png` anyway==.
  * Indicate the different roles played and responsibilities held by each team member. You can reassign these <trigger trigger="click" for="modal:midv11-rolesAndResponsibilities">roles and responsibilities %%(as explained in Admin {{ icon_embedding }} Project Scope)%%</trigger> later in the project, if necessary.

<modal large header="Admin {{ icon_embedding }} Choosing a profile photo" id="modal:mid-v12-photo">
  <include src="tp-deliverables-website.mbdf#profile-photo"/>
</modal>

<modal large header="Admin {{ icon_embedding }} Project Scope (extract): roles and responsibilities" id="modal:midv11-rolesAndResponsibilities">
  <include src="tp-expectations.md#roles"/>
</modal>

* **README** page: Update it to match your project.

  * Add a UI mockup of your intended final product.
    Note that the ==image of the UI should be `docs/images/Ui.png`== so that it can be downloaded by our scripts. Limit the file to contain one screenshot/mockup only and ensure the new image is roughly the same `height x width` proportions as the original one. %%Reason: when we compile these images from all teams into one page ([example]({{ url_team_list }})), yours should not look out of place.%%<br>
    {{ icon_tip }} If you did the above update correctly, UI mock up and profile photos should appear in your project website and this [**Project List Page**]({{ url_team_list }}).

  * Update all contents to match your own project.

  * Update the link of the GitHub Actions _build status badge_ (<img src="https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg" alt="Build Status">) so that it reflects the build status of your team repo.

  * Acknowledge the original source of the code e.g.,<br>
    `This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).`

* **Update site-wide settings** as described in the guide [_Using Jekyll for project documentation_ @SE-EDU/guides](https://se-education.org/guides/tutorials/jekyll.html).

</span>
{#====================================================================================================================#}
<span id="heading_update_the_ug">{{ icon_individual }} Update the UG</span>
<span id="desc_update_the_ug">

* **Move the draft UG content into the User Guide page** in your repository. Update the content as necessary. If a feature is not implemented in the current version, you can either omit it from the UG or mark it as 'Coming soon' (e.g., `## Archiving contacts [coming soon]`).<br>
  As <trigger trigger="click" for="modal:v11-divideDocs">mentioned before</trigger>, while it is more convenient for one person to update the entire UG, we recommend that **each person updates their own part of the docs** so that we can easily track the contribution of each member using [RepoSense]({{ url_tp_dashboard }}).

<modal large header="About Dividing Documentation Work" id="modal:v11-divideDocs">
  <include src="tp-tasks.mbdf#divideDocs"/>
</modal>
</span>
{#====================================================================================================================#}
<span id="heading_update_dg_user_stories_etc">{{ icon_team }} Update the DG: user stories, glossary, NFRs{% if not tic4001 %}, use cases{% endif %}</span>
<span id="desc_update_dg_user_stories_etc">

<div tags="m--tic4001" class="indented-level2">

<include src="tp-tasks.mbdf#divideDocs" />
</div>

* **Add the following to the DG**, based on your project notes from the previous weeks.<br>
  {{ icon_tip }} Some examples of these can be found in the [AB3 Developer Guide](https://se-education.org/addressbook-level3/DeveloperGuide.html#product-scope).

  * **Target user profile**, **value proposition**, and <trigger trigger="click" for="modal:v10-userstories">**user stories**</trigger>: Update the target user profile and value proposition to match the project direction you have selected. Give a list of the user stories (and update/delete existing ones, if applicable), including priorities. This can include user stories considered but will not be included in the final product.{% if not tic4001 %}
  * <trigger trigger="click" for="modal:v10-usecases">**Use cases**</trigger>: Give use cases (textual form) for a few representative user stories that need multiple steps to complete. %%e.g. Adding a tag to a person (assume the user needs to find the person first)%%{% endif %}
  * <trigger trigger="click" for="modal:v10-nfr">**Non-functional requirements**</trigger>:
    Note: Many of the given project constraints can be considered NFRs. You can add more. e.g. performance requirements, usability requirements, scalability requirements, etc.
  * <trigger trigger="click" for="modal:v10-glossary">**Glossary**</trigger>: Define terms that are worth recording.

<modal large header="Textbook {{ icon_embedding }} Specifying Requirements → Use Cases" id="modal:v10-usecases">
  <include src="../book/specifyingRequirements/useCases/introduction/unit-inElsewhere-asFlat.md" boilerplate />
</modal>

<modal large header="Textbook {{ icon_embedding }}" id="modal:v10-nfr">
  <include src="../book/requirements/nonFunctionalRequirements/unit-inElsewhere-asFlat.md" boilerplate/>
</modal>

<modal large header="Textbook {{ icon_embedding }}" id="modal:v10-glossary">
  <include src="../book/specifyingRequirements/glossary/what/unit-inElsewhere-asFlat.md" boilerplate/>
</modal>

<modal large header="Textbook {{ icon_embedding }}" id="modal:v10-userstories">
  <include src="../book/specifyingRequirements/userStories/introduction/unit-inElsewhere-asFlat.md" boilerplate/>
</modal>

</span>
{#====================================================================================================================#}
<span id="heading_practice_workflow_with_sample_repo">{{ icon_team }} Practice the workflow with a sample repo</span>
<span id="desc_practice_workflow_with_sample_repo">

* We recommend that you practice the forking workflow with your team members as described in the textbook section given in the panel below.<br>
  {{ icon_tip }} You can use your tP GitHub org for this exercise too.

{{ embed_topic("../book/gitAndGithub/forkingWorkflow/text.md#body", "Textbook " + icon_embedding + " Git & GitHub → **The forking workflow**", "1", indent=2) }}

</span>
{#====================================================================================================================#}
<span id="heading_do_a_practice_iteration">{{ icon_team }} Do a practice iteration</span>
<span id="desc_do_a_practice_iteration">

* To get some practice of doing project iterations, do this week's tP work (i.e., updates to various documents) as if it is a project iteration that will reach a milestone `{{ version_practice }}`, as explained in the pane below.

{{ embed_topic("appendixE-gitHub.md#tp-schedule-tracking", "Admin " + icon_embedding + " Appendix E(extract): **Project schedule tracking**", "1", indent="2") }}

* Don't forget to 'wrap up' the milestone at the end of this week (as explained in the panel above), after the work is done.
</span>
{#====================================================================================================================#}
<span id="heading_plan_the_next_iteration">{{ icon_team }} Plan the next iteration</span>
<span id="desc_plan_the_next_iteration">

<div class="indented-level2">

</div>

* {{ icon_team }} **Plan the next iteration**. As you know, you should follow the _breadth-first iterative_ process. Therefore, first you must decide what functionalities should be in the product if you had only two weeks to implement it. You have done that already when you chose user stories for {{ version_first }}, translated that to features, and even drafted the UG based on those features. You can tweak that plan further at this point if you wish, given that you now have some idea of how fast the team can work when using the prescribed workflow.
  * ==**Aim to produce a _working_ [MVP](https://en.wikipedia.org/wiki/Minimum_viable_product)**== at the end of this iteration even if the functionalities are not polished (polishing can be done in a later iteration).
  * **If possible, break the iteration into two _increments_** i.e., aim to produce an even simpler but working version after one week.
  * **Avoid depth-first implementations**: "I'll do the back-end part of feature X in this iteration" is not acceptable as that is not in the spirit of iterative development. Remember, we are pretending this to be the last iteration; why would you implement the back-end part of a feature in the last iteration?<br>
    It is OK to add simpler versions of bigger features, but not OK to add partial features that can't be used yet.
* {{ icon_team }} **Divide the work among the team members** i.e., the work required for the current iteration.
* {{ icon_individual }} **Reflect the above plan in the issue tracker** by assigning the corresponding issues (create new issues if necessary) to yourself and to the corresponding milestone. %%For example, the user story pertaining to the increment `show a place holder for photo, showing a generic default image` should be assigned to Jake and to milestone `{{ version_first }}`%%<br>
  Optionally, you can define a `mid-{{ version_first }}` milestone to keep track of things to be done within the first half of the milestone.
</span>
{#====================================================================================================================#}
<span id="heading_start_implementing_the_next_version">{{ icon_individual }} Start implementing the next version</span>
<span id="desc_start_implementing_the_next_version">

* If you have time, start implementing v1.2.
</span>
{#====================================================================================================================#}
<span id="heading_start_implementing_first_version">{{ icon_individual }} Start implementing {{ version_first }}</span>
<span id="desc_start_implementing_first_version">

<div class="indented-level2">

<box>

{{ icon_tip }} **You may <tooltip content="i.e., copy-paste, not clone/fork">re-purpose/adopt</tooltip> code** from any of the below to be used in your tP, provided you give credit to the source (and do not claim such code as yours).
* The iP code of any of your team members, or of any other person in the module.
* Code from [AddressBook-Level2](https://se-education.org/addressbook-level2/) or any code used in module activities {{ "e.g., personbook" if not tic4001 }}

</box>
</div>

* Start implementing {{ version_first }}, by adding code in small steps, while working in parallel, aiming to produce a VERY simple working version after one week, and a bit more functional version at the end of iteration (i.e., after two weeks).

* See the panel below for our recommendations on the project workflow.

{{ embed_topic("appendixE-gitHub.md#workflow", "Admin " + icon_embedding + " Appendix E(extract): **Workflow**", "3", indent="2") }}

</span>
{#====================================================================================================================#}
<span id="heading_ensure_you_know_tp_expectations">%%{{ icon_individual }} Ensure you know tP expectations%%</span>
<span id="desc_ensure_you_know_tp_expectations">

* If you haven't done so already, make sure you know individual and team expectations of the tP

{{ embed_topic("tp-expectations.md#functionalityExpectations", "Admin " + icon_embedding + " tP: Functionality Expectations", "3", indent="2") }}
{{ embed_topic("tp-expectations.md#individualExpectations", "Admin " + icon_embedding + " tP: Individual Expectations", "3", indent="2") }}
{{ embed_topic("tp-expectations.md#teamExpectations", "Admin " + icon_embedding + " tP: Team Expectations", "3", indent="2") }}
</span>
{#====================================================================================================================#}
<span id="heading_adjust_process_rigor">{{ icon_team }} Adjust process rigor if necessary</span>
<span id="desc_adjust_process_rigor">

* **Adjust process rigor**, as explained in the panel below:

{{ embed_topic("appendixE-gitHub.md#workflow-after-v11", "Admin " + icon_embedding + " Appendix E(extract): **Workflow (after " + version_first + ")**", "3", indent="2") }}

</span>
{#====================================================================================================================#}
<span id="heading_start_proper_milestone_management">{{ icon_team }} Start proper milestone management</span>
<span id="desc_start_proper_milestone_management">

* **Set up the issue tracker** as described in the panel below, if you haven't done so already.

{{ embed_topic("appendixE-gitHub.md#issue-tracker-setup", "Admin " + icon_embedding + " Appendix E(extract): **Setting up the issue tracker**", "1", indent="2") }}

* **Start proper schedule tracking and milestone management** as explained in the panel below.

{{ embed_topic("appendixE-gitHub.md#tp-schedule-tracking", "Admin " + icon_embedding + " Appendix E(extract): **Project schedule tracking**", "1", indent="2") }}

<div class="indented">

{{ icon_tip }} **Try to achieve all milestone requirements, but do not fret if you miss a few**.  You will get full marks as long as you achieve about 60% of the milestone requirements on average. Yes, that's a pretty low bar, but we have set it low in order to reduce workload and stress. Ideally, you should achieve close to 80-90%.
</div>
</span>
{#====================================================================================================================#}
<span id="heading_use_github_to_manage_milestones">{{ icon_team }} Use GitHub to manage milestones</span>
<span id="desc_use_github_to_manage_milestones">

* We ==recommend== using the GitHub issue tracker and its _milestones_ feature to manage your project milestones, as explained in the following panels.

{{ embed_topic("appendixE-gitHub.md#issue-tracker-setup", "Admin " + icon_embedding + " Appendix E(extract): **Setting up the issue tracker**", "1", indent="2") }}
{{ embed_topic("appendixE-gitHub.md#tp-schedule-tracking", "Admin " + icon_embedding + " Appendix E(extract): **Project schedule tracking**", "1", indent="2") }}

</span>
{#====================================================================================================================#}
<span id="heading_add_first_functionality_increment">{{ icon_individual }} Add the first functionality increment</span>
<span id="desc_add_first_functionality_increment">

* Add functionality in small steps, aiming to deliver the first working version of your product by the mid-milestone (i.e., in one week), and {{ version_first }} at the end of this iteration (i.e., in two weeks).<br>
  **If you split the iteration into two smaller iterations** of one-week each (recommended), name the first one `{{ version_first }}` and the second one `{{ version_first }}b` so that the dashboard can track them accurately.

* {{ icon_important_big_red }} **From this point onwards each member is expected to contribute <tooltip content="the amount of code does not matter; even small contributions are acceptable">some</tooltip> code to each <tooltip content="{{ version_penultimate }}, {{ version_final }}"> milestone</tooltip>, preferably each week; only merged code is considered as contributions** %%<popover content="The ability to deliver code incrementally is an important learning outcome of this module because incremental delivery, among other things, improves the _visibility_ of your work.">(Reason)</popover>%%. <br>
</span>
{#====================================================================================================================#}
<span id="heading_add_junit_tests">{{ icon_individual }} Add some JUnit Tests</span>
<span id="desc_add_junit_tests">

* We recommend that each person adds some JUnit tests to test their tP code.

* Some examples from [AddressBook-Level2](https://github.com/se-edu/addressbook-level2):
  * <tooltip content="Software Under Test">SUT</tooltip>[`seedu.addressbook.common.Utils.java`](https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/common/Utils.java)<br>
    Tests: [`seedu.addressbook.common.UtilsTest.java`](https://github.com/se-edu/addressbook-level2/blob/master/test/java/seedu/addressbook/common/UtilsTest.java)<br>
    {{ icon_info }} Note how **the test class is in the same package as the SUT** (although in a different folder). Advantage: the test class has access to all non-private members of the SUT, including _package private_ members.
  * SUT: [`seedu.addressbook.parser.Parser.java`](https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/parser/Parser.java)<br>
    Tests: [`seedu.addressbook.parser.ParserTest.java`](https://github.com/se-edu/addressbook-level2/blob/master/test/java/seedu/addressbook/parser/ParserTest.java)<br>
    {{ icon_info }} Note how some of the test methods follow a different naming convention e.g., `parse_emptyInput_returnsIncorrect()`. Cross-check the coding standard to confirm if this naming convention is allowed.
  * SUT: [`seedu.addressbook.data.AddressBook.java`](https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/data/AddressBook.java)<br>
    Tests: [`seedu.addressbook.data.AddressBookTest.java`](https://github.com/se-edu/addressbook-level2/blob/master/test/java/seedu/addressbook/data/AddressBookTest.java)
</span>
{#====================================================================================================================#}
<span id="heading_deliver_first_version">{{ icon_team }} Deliver {{ version_first }}</span>
<span id="desc_deliver_first_version">

<div tags="m--cs2103">

* The product must be working although the functionality is basic.

</div>
<div tags="m--cs2113 m--tic4001">

* When the {{ version_first }} is ready, do a release on GitHub. Remember to upload the jar file as well.
* Wrap up the milestone on GitHub.

{{ embed_topic("appendixE-gitHub.md#tp-schedule-tracking", "Admin " + icon_embedding + " Appendix E(extract): **Project schedule tracking**", "1", indent="2") }}
</div>
</span>
{#====================================================================================================================#}
<span id="heading_wrap_up_first_version">{{ icon_team }} Wrap up {{ version_first }}</span>
<span id="desc_wrap_up_first_version">

* {{ icon_team }} **Manage the milestone** {{ version_first }} as explained in the panel below.

{{ embed_topic("appendixE-gitHub.md#tp-schedule-tracking", "Admin " + icon_embedding + " Appendix E(extract): **Project schedule tracking**", "1", indent="2") }}

* **Wrap up the milestone** using a git tag `{{ version_first }}`. When the milestone deadline is near (e.g., 0.5 days before the deadline), if you think some of the ongoing work intended for the current milestone may not finish in time, reassign them to a future milestone.

<div tags="m--cs2103">

* Do a release on GitHub. Uploading a JAR file to GitHub is optional.
</div>

</span>
{#====================================================================================================================#}
<span id="heading_do_an_informal_demo">{{ icon_team }} Do an informal demo of {{ version_first }}</span>
<span id="desc_do_an_informal_demo">

<div id="demo">
<div tags="m--cs2103 m--cs2113">

<!-- * **Do an informal demo** of the new features during the tutorial. To save time, we recommend that one member demos all new features, using the commit tagged as `{{ version_first }}` in the `master` branch %%i.e. only features included in the current release should be demoed%%.-->
* As we don't have in-class tutorials this semester, do the following in lieu of a live demo:<br>
  [one member] Run your app using the latest released version `{{ version_first }}` <span tags="m--cs2103">(or `{{ version_first }}b`, if applicable)</span>. Take screenshots of each available feature in action. Add those screenshots to your _collaborative project notes_ document with an appropriate heading e.g., `{{ version_first }} features demo`. Alternatively, you can screen-record a demo, upload it to somewhere, and post the link in the project notes document.
</div>
<div tags="m--tic4001">

* During the lecture, do an informal demo of your {{ version_first }} to the profs.
</div>
</div>
</span>
{#====================================================================================================================#}
<span id="heading_do_a_postmortem">{{ icon_team }} Do a postmortem of the previous iteration</span>
<span id="desc_do_a_postmortem">

* Discuss with the team how the iteration went (i.e., what worked well, what didn't), and your **plans to improve the process** (not the product) in the next iteration.
* Keep notes about the discussion in your project notes document so that the tutor can check them.
</span>
{#====================================================================================================================#}
<span id="heading_start_on_the_penultimate_version">{{ icon_individual }} Start the next iteration</span>
<span id="desc_start_on_the_penultimate_version">
<div class="indented">

<box type="tip" seamless>

<div tags="m--cs2113 m--cs2103">

The version you deliver in this iteration (i.e., {{ version_penultimate }}) will be subjected a peer testing (aka [PE Dry Run](tp-pe.html#tp-practical-exam-dry-run-pe-d)) and you will be informed of the bugs they find (no penalty for those bugs). Hence, it is in your interest to ==finish implementing all your <tooltip content="features you want to include in your final version (i.e., {{ version_final }})">final features</tooltip> in this iteration itself== so that you can get them tested for _free_. You can use the final iteration for fixing the bugs found by peer testers.

Furthermore, the final iteration (i.e., the one after this) will be shorter than usual and there'll be a lot of additional things to do during that iteration e.g., polishing up documentation; all the more reason to try and get all the implementation work done in this iteration itself.
</div>
<div tags="m--tic4001">

In the final iteration (i.e., the one after this), you will be doing a lot of additional things e.g., adding documentation.
Hence, it is in your interest to ==finish implementing all your <tooltip content="features you want to include in your final version (i.e., {{ version_final }})">final features</tooltip> in this iteration itself== so that you can use the final iteration for polishing up the functionalities and adding documentation.

</div>
</box>

As you did in the previous iteration,
* **Plan the next iteration** (steps are given below as a reminder):
  * {{ icon_team }} Decide which enhancements will be added to the product in this iteration, if this is the last iteration.
  * {{ icon_team }} If possible, split that into two incremental versions.
  * {{ icon_team }} Divide the work among team members.
  * {{ icon_individual }} Reflect the above plan in the issue tracker.
* {{ icon_individual }} **Start implementing** the features as per the plan made above.
* {{ icon_team }} **Track the progress** using GitHub issue tracker, milestones, labels, etc.

In addition,
* **Maintain the defensiveness of the code**: Remember to use assertions, exceptions, and logging in your code, as well as other defensive programming measures when appropriate.<br>
  {{ icon_important_big_red }} Remember to [enable assertions in your IDEA run configurations](https://se-education.org/guides/tutorials/intellijUsefulSettings.html) and [in the gradle file](https://se-education.org/guides/tutorials/gradle.html#enabling-assertions).
* {{ icon_tip }} Recommend: **Each PR should also update the relevant parts of documentation and tests**. That way, your documentation/testing work will not pile up towards the end.
</div>
</span>
{#====================================================================================================================#}
<span id="heading_make_code_more_defensive">{{ icon_individual }} Make the code more defensive</span>
<span id="desc_make_code_more_defensive">

* **Improve the defensiveness of the code**: We recommend you add assertions, exceptions, and logging to your code.<br>
  {{ icon_important_big_red }} Remember to enable assertions in your,
  * [IDEA run configurations](https://stackoverflow.com/questions/18168257/where-to-add-compiler-options-like-ea-in-intellij-idea) -- if your Intellij is set not to use Gradle when running the project)
  * [the `build.gradle` file](https://stackoverflow.com/questions/48396274/how-to-enable-assertions-in-the-gradle-run-task) -- if you use Gradle to run the project, or if your Intellij is using Gradle to run the project
</span>
{#====================================================================================================================#}
<span id="heading_update_dg_with_design_details">{{ icon_individual }} Update the DG with design details</span>
<span id="desc_update_dg_with_design_details">

* **Update the Developer Guide** as follows:
  * ==Each member should describe the implementation of at least one enhancement she has added== (or planning to add). <br>
    Expected length: 1+ page per person{% if module == "CS2113" or module == "TIC4001" %}
  * Describing the design at a multiple-levels (e.g., first, describe at _architecture-level_, then describe at _component-level_) is optional. It is also acceptable to have one _Design & Implementation_ section in which you describe the entire thing at the class- and object-level.{% endif %}
  * The description can contain things such as,
    * How the feature is implemented (or is going to be implemented).
    * Why it is implemented that way.
    * Alternatives considered.
<div class="indented-level2">

<panel type="success" expanded>
<span slot="header" class="card-title">

##### <span class="text-white"> {{ icon_tip }} Admin {{ icon_embedding }} tP Deliverables → DG → Tips</span>
</span>
<span id="dgTips">

<include src="tp-deliverables-dg.mbdf#dgTips" />
</span>
</panel>
<p/>
</div>
</span>
{#====================================================================================================================#}
<span id="heading_do_a_release">{{ icon_team }} Do a trial JAR release</span>
<span id="desc_do_a_release">

* {{ icon_important_big_red }} **Do a <tooltip content="resulting in a jar file on GitHub that can be downloaded by potential users">product release</tooltip>** [as described in the Developer Guide]({{ url_ab3_fork_website }}/DevOps.html#making-a-release). You can name it something like `{{ version_first }}.1` (or `{{ version_penultimate }}.trial`). ==Ensure that the jar file works as expected in an empty folder and using Java 11==, by doing some manual testing. %%Reason: You are _required_ to do a proper product release for {{ version_penultimate }}. Doing a trial at this point will help you iron out any problems in advance. It may take additional effort to get the jar working especially if you use third party libraries or additional assets such as images.%%
</span>
{#====================================================================================================================#}
<span id="heading_make_code_reposense_compatible">{{ icon_individual }} Ensure the code RepoSense-compatible</span>
<span id="desc_make_code_reposense_compatible">

<span id="midV13-repoSenseCompatible">

* **Ensure your code is <tooltip content="i.e., RepoSense can detect your code as yours">RepoSense-compatible</tooltip>** and the **code it attributes to you is indeed the code written by you**, as explained below:
  * Go to the [tp Code Dashboard]({{ url_tp_dashboard }}). Click on the `</>` icon against your name and verify that the ==lines attributed to you (i.e., lines marked as green)== reflects your code contribution correctly. This is important because some aspects of your project grade (e.g., code quality) will be graded based on those lines.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;<img src="images/greenLines.png" width="600">
  <p/>

  * More info on how to make the code RepoSense compatible:

{{ embed_topic("tools.md#reposense", "Admin " + icon_embedding + " Tools → RepoSense", "1", indent="4") }}
</span>
</span>
{#====================================================================================================================#}
<span id="heading_smoke_test_catcher">{{ icon_individual }} Smoke-test CATcher</span>
<span id="desc_smoke_test_catcher">

* **This activity is <span class="text-danger">compulsory</span> and counts for `3` participation points.** Please do it before the deadline.
<div class="indented-level2">

<box dismissible>

%%**{{ icon_info }} Some background:** As you know, our <tooltip content="i.e., Practical Exam">PE</tooltip> includes peer-testing tP products under exam conditions. In the past, we used GitHub as the platform for that -- which was not optimal (e.g., it was hard to ensure the compulsory labels have been applied). As a remedy, some ex-students have been developing an app called <tooltip content="CAT stands for Crowd-sourced Anonymous Testing">CATcher</tooltip> that we'll be using for the PE this semester.%%
</box>

This week, we would like you to smoke-test the CATcher app **to ensure it can run in your computer**.
<p/>

<panel type="info" header="**The steps for smoke-testing CATcher:**" minimized>

1. **Download the latest version** of the CATcher executable from [https://github.com/CATcher-org/CATcher/releases](https://github.com/CATcher-org/CATcher/releases).
1. **Launch the app.** Allow the app to run if there are security warnings %%(e.g., for Win 10, click the `More Info` link in the security warning and choose `Run anyway`)%%.<br>
   {{ icon_tip }} If the app is blocked by your virus scanner, put it in a new folder and add the folder to the _exclusions_ list of the virus scanner.<br>
   {{ icon_info }} If you encounter other problems at the app launch, refer to the [Notes on using the CATcher Desktop App](https://github.com/CATcher-org/CATcher/blob/master/docs/usage-notes.md).
1. **Login**: Choose the _session_ `{{ module }}/T Alpha Test`, and submit.
   <img src="images/catcherLogin.png" />
1. In the next screen, login to CATcher using your GitHub account.<br>
   If the app asks for public repo access permissions, grant it (just go with the default settings).
1. **Let CATcher create a repo named `alpha`** in your GitHub account, when it asks for permission. That repo will be used to hold the bug reports you will create in this testing session.
1. **Use the app to create 1-2 dummy bug reports**, similar to how you would enter bug reports in the GitHub issue tracker. Include at least one screenshot in one of those bug reports.<br>
   {{ icon_tip }} you can ==copy-paste screenshots== into the bug description.<br>
   {{ icon_tip }} You can use Markdown syntax in the bug descriptions.<br>
   {{ icon_info }} The `severity` and `type` labels are compulsory.
1. **Report any problems you encounter** at the [CATcher issue tracker](https://github.com/CATcher-org/CATcher/issues).
1. **Do NOT delete the `alpha` repo** created by CATcher in your GitHub account (keep it until the end of the semester) as our scripts will look for it later to check if you have done this activity.
1. **Do NOT delete the CATcher executable** you downloaded either; you will need it again.

</panel>
<p/>

</div>

</span>
{#====================================================================================================================#}
<span id="heading_deliver_the_feature">{{ icon_individual }} Deliver {{ version_penultimate }}</span>
<span id="desc_deliver_the_feature">

* Deliver the features that you planned for {{ version_penultimate }}.
</span>
{#====================================================================================================================#}
<span id="heading_update_user_docs">{{ icon_individual }} Update user docs</span>
<div id="desc_update_user_docs">

* {{ icon_important_big_red }} Update the {{ version_penultimate }} user guide to match the current version of the product. %%Reason: testers will need to refer to the UG during the practical exam dry run%%.
  * Clearly indicate which features are not implemented yet %%e.g. tag those features with a `Coming soon`%%.
  * For those features already implemented, ensure their descriptions match the exact behavior of the product %%e.g. replace mockups with actual screenshots%%

<div tags="m--cs2103">

* **Landing page (`docs/index.md`)**: Update to look like a real product (rather than a project for learning SE) if you haven't done so already. In particular, ==update the `Ui.png` to match the current product (<trigger trigger="click" for="modal:v13-tipsForProductScreenshot">{{ icon_tip }} tips</trigger>)==.

<modal large header="Admin → Project Deliverables → Website" id="modal:v13-tipsForProductScreenshot">
  <include src="tp-deliverables-website.mbdf#tips-for-product-screenshot"/>
</modal>
</div>

{{ embed_topic("tp-deliverables.md#tp-deliverables-ug", "Admin " + icon_embedding + " tP → Deliverables → User Guide", "3", indent="2") }}

</div>
{#====================================================================================================================#}
<span id="heading_demo_penultimate_version">{{ icon_team }} Demo {{ version_penultimate }}</span>
<span id="desc_demo_penultimate_version">

<div id="demo">
<div tags="m--cs2103 m--cs2113">

* [one member] As was done in `{{ version_first }}`,
  * Run your application using the ==JAR file== that you released for `{{ version_penultimate }}`.
  * Take screenshots of each available feature in action (or screen-record a demo -- need not be polished).
  * Add those screenshots (or upload the demo video somewhere and give the link) to your _collaborative project notes_ document with an appropriate heading e.g., `{{ version_penultimate }} features demo`.
</div>
<div tags="m--tic4001">

* During the lecture, do an informal demo of your {{ version_first }} to the profs.
</div>
</div>
</span>
{#====================================================================================================================#}
<span id="heading_add_sd_to_dg">{{ icon_individual }} Add sequence diagrams to the developer guide</span>
<span id="desc_add_sd_to_dg">

* Add sequence diagrams to enhance your DG wherever they can be useful. Note that diagrams you add in this week will receive feedback while diagrams added later will not.
* {{ icon_tip }} Try to do this before {{ day_first_tutorial }} so that the added sequence diagrams can get peer feedback via the DG peer review that will happen during this week's tutorial.
</span>
{#====================================================================================================================#}
<span id="heading_deliver_penultimate_version">{{ icon_individual }} Deliver {{ version_penultimate }}</span>
<span id="desc_deliver_penultimate_version">
* As before, do a release on GitHub and upload the {{ version_penultimate }} jar file. <span tags="m--cs2113 m--cs2103" class="text-danger">Do this before the deadline as PE testers will start downloading jar files ahead of time.</span>
* ==IMPORTANT: ensure your jar file was generated using Java 11 and can work on all major OS'es using JDK 11.==

{{ embed_topic("tp-constraints.md#Constraint-Java-Version", "Admin " + icon_embedding + " tP Contstraints → Constraint-Java-Version", "2", indent="2") }}

* Wrap up the milestone on GitHub.
</span>
{#====================================================================================================================#}

<span id="heading_release_as_a_jar_file">{{ icon_team }} Release as a jar file</span>
<span id="desc_release_as_a_jar_file">

* {{ icon_important_big_red }} **Do a <tooltip content="resulting in a jar file on GitHub that can be downloaded by potential users">proper product release</tooltip>** [as described in the Developer Guide]({{ url_ab3_fork_website }}/DevOps.html#making-a-release). Do some manual tests to ensure the jar file works.
</span>
{#====================================================================================================================#}
<span id="heading_wrap_up_penultimate_version">{{ icon_team }} Wrap up {{ version_penultimate }}</span>
<span id="desc_wrap_up_penultimate_version">

* as before
</span>
{#====================================================================================================================#}
<span id="heading_review_others_dg">{{ icon_individual }} Review others' DG</span>
<span id="desc_review_others_dg">

<!--
* ~~**Divide into two sub-teams**, ensuring that each team has at least one member who is good with UML.~~<br>
  <span class="text-info">This activity is to be done individually.</span>
-->

* To be done during the tutorial. Please don't do this task before the tutorial as others need time to update their DGs.
* ==Read _all_ instructions== before you start the activity.
* **Find the team choices you have been allocated to review**, as given in the panel below.

{% macro get_review_allocation_for_team(reviewing_team) -%}
{%- set reviewed_team = "" -%}
{% for allocation in team_review_allocation  -%}
{% if allocation[0] == reviewing_team %}{% set reviewed_team %}{{ allocation[1] }}{% endset %}{% endif %}
{%- endfor %}{{ reviewed_team }}
{%- endmacro %}

{% macro get_pr_link(team_id) -%}
<a href="https://github.com/nus-{{ module | lower}}-{{ semester }}/tp/pulls?q=is%3Aopen+is%3Apr+{{ team_id }}+" class="badge badge-primary">PR</a>
{%- endmacro  %}

{% macro get_dg_link(team_id) -%}
<a href="https://{{ semester }}-{{ team_id | lower}}.github.io/tp/DeveloperGuide.html" class="badge badge-primary">DG</a>
{%- endmacro  %}

{% macro get_links(team_id) -%}
`{{ team_id }}`  {{ get_dg_link(team_id) }} {{ get_pr_link(team_id) }}
{%- endmacro  %}

<div class="indented-level2">

<panel header="Allocation for DG review" >

Your GitHub  | First choice | Second choice | Third choice
-------------|--------------|---------------|-------------
{% for allocation in tp_dg_review_allocation  %}`{{ allocation[0] }}` | {{ get_links(allocation[1]) }} | {{ get_links(allocation[2]) }} | {{ get_links(allocation[3]) }}
{% endfor %}
</panel>
</div>

* **Decide which of the given team(s) to review**:
  * Open the <span class="badge badge-primary">DG</span> link of the team allocated as 'First choice'.
  * Confirm that the DG has significant updates, to the diagrams in particular. If it doesn't, you can try the DG of the 'Second choice' team, and failing that, 'Third choice' team.
  * If neither _one_ of the three has enough updates but collectively they have enough updates, you can also review all of them.
  * Failing all above, you can pick any other team(s) to review.
  * Try to give at least 4 comments in total.
  * If the PR already has reviews, you can give your own input of the existing review comments too.

* **Go to the <span class="badge badge-primary">PR</span>** of the team(s) you have chosen to review.
* **Review the `Design` and the `Implementation` sections w.r.t possible DG bugs** (given further down); add your observations as comments.<br>

<div class="indented-level2">

<box>

* In the PR, add _review comments_ (i.e., in the {{ show_as_rounded_tab(':octicon-diff: files changed') }} tab) in the corresponding place of the code.
  * In this case, choose the {{ button('Start a review', button_style="success") }} option rather than {{ button('Add single comment') }} option.
* But ==if the 'files changed' tab is too laggy, you can add a normal comment instead== in the {{ show_as_rounded_tab(':octicon-comment-discussion: conversation') }} tab.<br>
  * In this case, enter each observation as a separate comment %%(reason: our bot will count the number of comments you have given to determine if you qualify for participation points)%%
* As you know, it is better to phrase your comments as question/doubts (e.g., `Is this format correct? Should it be ... instead?`) rather than directives (e.g., `Change this to ...`).<br>
  Where possible, use screenshots from their DG in your comments, preferably with annotations. This is particularly useful when commenting on diagrams. An example given below:<br>
  <img src="images/ReviewCommentExample.png">
* The understanding you gain from this exercise can indirectly determine how well you do in your own project. Note that your comments will be reviewed by a tutor later.
<!--
* Do not finalize the review at this stage. Just keep adding comments.
* <span class="text-success">**The understanding you gain from this exercise can indirectly determine how well you do in your own project.**</span> ==If you have even the slightest doubt about your observations in this exercise, please discuss it with the tutor== to ensure you have the right understanding of the criteria used.
-->
</box>

<box border-left-color="green">

##### <span class="text-success">DG - Possible Bugs</span>
{{ icon_important_big_red }} Pay attention to these as they are same as the final evaluation criteria of the DG.<br>

{{ embed_topic("tp-grading-bugs.mbdf#umlDiagramBugs", "Admin " + icon_embedding + " tP Grading → DG Bugs → UML Diagrams → Possible Bugs", "3", indent="1", status="expanded", type="danger") }}
{{ embed_topic("tp-grading-bugs.mbdf#generalDocBugs", "Admin " + icon_embedding + " tP Grading → General Documentation Bugs", "3", indent="1", status="expanded", type="danger") }}

Also see:
{{ embed_topic("tp-deliverables-dg.mbdf#dgTips", "Admin " + icon_embedding + " tP: Deliverables → DG → Tips", "3", indent="1", status="expanded", type="success") }}

</box>

</div>

<!--
* **Discuss your comments/observations/doubts with the tutor** and other team members to confirm the comments you entered are correct.
* **Update your review comments if necessary**, based on the discussion you just had. After that, you can submit the review.<br>
-->
* **After the tutorial**, if you are unsure about a concern raised by a reviewer, you can post in the [forum]({{ url_forum }}) to seek the opinion of the teaching team.
</span>
{#====================================================================================================================#}
<span id="heading_attend_the_PED">{{ icon_individual }} Attend the practical exam dry run</span>
<span id="desc_attend_the_PED">

* =={{ icon_important_big_red }} See info in the panel below:==

{{ embed_topic("tp-pe.md#tp-practicalexam-dry-run", "Admin " + icon_embedding + " tP Deliverables → **Practical Exam - Dry Run**", "1", indent="2") }}
</span>
{#====================================================================================================================#}
<span id="heading_tweak_product_as_per_PED">{{ icon_individual }} Tweak the product as per peer-testing results</span>
<span id="desc_tweak_product_as_per_PED">

* Follow the procedure for dealing with PED bugs you received:

{{ embed_topic("tp-ped.mbdf#after-ped", "Admin " + icon_embedding + " tP → Deliverables → **After the PED**", "3", indent="2") }}

* **Freeze features** around this time. Ensure the current product have all the features you intend to release at {{ version_final }}. Doing major changes after this point is risky. The remaining time is better spent fixing problems discovered late or on fine-tuning the product.
* **Update documentation** to match the product.
* **Consider increasing test coverage** by adding more tests if it is lower than the level you would like it to be. Take note of our expectation on test code (given in the panel below).

{{ embed_topic("tp-expectations.md#testing-expectations", "Admin " + icon_embedding + " tP → Grading → Expectation on testing", "3", indent="2") }}

* **After you have sufficient code coverage, fix remaining code quality problems** and bring up the quality to your target level.

{{ embed_topic("tp-grading.md#projectGrading-codeQuality-criteria", "Admin " + icon_embedding + " tP → Grading → Code Quality Tips", "3", indent="2") }}
</span>
{#====================================================================================================================#}
<span id="heading_draft_the_ppp">{{ icon_individual }} Draft the PPP</span>
<span id="desc_draft_the_ppp">

* **Create the first version of your _Project Portfolio Page (PPP)_**.<br>
  Reason: ==Each member needs to create a PPP== to describe your contribution to the project.

{{ embed_topic("tp-deliverables.md#tp-deliverables-ppp", "Admin " + icon_embedding + " tP → Deliverables → Project Portfolio Page", "2", indent="2") }}
</span>
{#====================================================================================================================#}
<span id="heading_prepare_for_demo">{{ icon_team }} ~~Prepare for the demo rehearsal~~</span>
<span id="desc_prepare_for_demo">

<div class="indented-level2">
Not applicable this semester
</div>

<!--
* You will do a product demo during the tutorial to serve as a rehearsal for the final project demo at {{ version_final }}
  * ==**Follow final demo instructions** (given in the panel below)== as much as possible .
  * **Cover all features**, not just the ones added in the recent iteration.
  * **Make it a 'well prepared' demo** i.e., know in advance exactly what you'll do in the demo.

\{\{ embed_topic("tp-deliverables.md#tp-deliverables-demo", "Admin " + icon_embedding + " tP → Final Demo (extract)", "3", indent="2") }}
-->
</span>
{#====================================================================================================================#}
<span id="heading_double_check_reposense_compatibility">{{ icon_team }} Double-check RepoSense compatibility</span>
<span id="desc_double_check_reposense_compatibility">

* {{ icon_important_big_red }} Once again, double-check to ensure the code attributed to you by RepoSense is correct.

{{ embed_topic("tp-tasks.mbdf#midV13-repoSenseCompatible", "Admin " + icon_embedding + " tP → mid-" + version_final + " → Making the Code RepoSense-Compatible", "1", indent="2") }}
</span>
{#====================================================================================================================#}
<span id="heading_do_final_tweaks">{{ icon_individual }} Do final tweaks to the feature</span>
<span id="desc_do_final_tweaks">

* Do the final tweaks to the feature and the documentation. We strongly recommend not to do major changes to the product this close to the submission deadline.
</span>
{#====================================================================================================================#}
<span id="heading_submit_final_deliverables">{{ icon_individual }}{{ icon_team }} Submit deliverables</span>
<span id="desc_submit_final_deliverables">

* **Deadline** for all {{ version_final }} submissions is **{{ date_final_submission | date(format_normal)}} 2359** unless stated otherwise.
* {{ icon_important_big_red }} **Penalty for late submission:** {% if tic4001 %}Given that you are part-time students, we'll try to be as lenient as possible w.r.t. the late submission penalty but there will be no free deadline extensions, to be fair to those who submit on time.{% endif %}<br>
  ==-1 mark for missing the deadline (up to 2 hour of delay).==<br>
  -2 for an _extended delay_ (up to 24 hours late).<br>
  Penalty for delays beyond 24 hours is determined on a case by case basis.{% if not tic4001 %}
  * Even a one-second delay is considered late, irrespective of the reason.{% endif %}
  * For submissions done via LumiNUS, the submission time is the timestamp shown by LumiNUS.
  * When determining the late submission penalty, **we take the latest submission** even if the same exact file was submitted earlier. Do not submit the same file multiple times if you want to avoid unnecessary late submission penalties.
  * The whole team is penalized for problems in team submissions. Only the respective student is penalized for problems in individual submissions.
* **Submit to LumiNUS folder we have set up**, not to your project space.
  {% if has_t %}{{ module | lower }}T students: documents should be submitted to both modules. It's not enough to submit to CS2101 side only.{% endif %}
* {{ icon_important_big_red }} **Follow submission instructions closely**. ==Any non-compliance will be penalized==. e.g. wrong file name/format.
  * For pdf submissions, ensure the file is usable and hyperlinks in the file are correct. Problems in documents are considered bugs too %%e.g. broken links, outdated diagrams/instructions etc.%%.
* **Do not update the code during the 14 days after the deadline.** Get our permission first if you need to update the code in the repo during that _freeze_ period.
  * You can update issues/milestones/PRs even during the _freeze_ period.
  * You can update the code during the freeze period if the change is related to a late submission approved by us.
  * You can continue to evolve your repo after the freeze period.

<div class="indented">

<big>**Submissions:**</big>
</div>

<div class="indented-level2" id="tip-how-to-convert-to-pdf">
<box type="important" seamless>

**To convert the UG/DG/PPP into PDF format**, go to the generated page in your project's github.io site and use [this technique](https://se-education.org/guides/tutorials/savingPdf.html) to save as a pdf file. ==Using other techniques can result in poor quality resolution (will be considered a bug) and unnecessarily large files.==

**Ensure hyperlinks in the pdf files work**. Your UG/DG/PPP will be evaluated using PDF files during the PE. ==Broken/non-working hyperlinks in the PDF files will be reported as bugs== and will count against your project score. Again, use the conversion technique given above to ensure links in the PDF files work.
</box>
</div>

* {{ icon_team }} **Product**:
  * Do a release on GitHub, tagged as `{{ version_final }}`.
  * Upload the jar file to LumiNUS.<br>
    File name: `[team ID][product name].jar` %%e.g. [{{ example_team_id }}][ContactsPlus].jar%%

{{ embed_topic("tp-deliverables.md#tp-deliverables-executable", "Admin " + icon_embedding + " tP → Deliverables → Executable", "3", indent="2") }}


* {{ icon_team }} **Source Code**: Push the code to GitHub and tag with the version number. Source code (==please ensure the code reported by RepoSense as yours is correct;== any updates to RepoSense config files or `@@author` annotations after the deadline will be considered a later submission). Note that the quality of the code attributed to you accounts for a significant component of your final score, graded individually.

{{ embed_topic("tp-deliverables.md#tp-deliverables-sourcecode", "Admin " + icon_embedding + " tP → Deliverables → Source Code", "3", indent="2") }}


* {{ icon_team }} **User Guide**: Convert to pdf and upload to LumiNUS.<br>
  File name: `[TEAM_ID][product Name]UG.pdf`  %%e.g.[{{ example_team_id }}][Contacts Plus]UG.pdf%%

{{ embed_topic("tp-deliverables.md#tp-deliverables-ug", "Admin " + icon_embedding + " tP → Deliverables → User Guide", "3", indent="2") }}

* {{ icon_team }} **Developer Guide**: submission is similar to the UG<br>
  File name: `[TEAM_ID][product Name]DG.pdf` %%e.g. [{{ example_team_id }}][Contacts Plus]DG.pdf%%

{{ embed_topic("tp-deliverables.md#tp-deliverables-dg", "Admin " + icon_embedding + " tP → Deliverables → Developer Guide", "3", indent="2") }}


* {{ icon_individual }} **Project Portfolio Page (PPP)**:
  * PDF file: submission is similar to the UG<br>
    File name: `[TEAM_ID][Your full Name as Given in LumiNUS]PPP.pdf` %%e.g.[{{ example_team_id }}][Leow Wai Kit, John]PPP.pdf%%<br>
    {{ icon_info }} Use `-` in place of `/` if your name has it e.g., `Ravi s/o Veegan` → `Ravi s-o Veegan` (reason: Windows does not allow `/` in file names) 
  * HTML version: make available on `github.io`

{{ embed_topic("tp-deliverables.md#tp-deliverables-ppp", "Admin " + icon_embedding + " tP → Deliverables → Project Portfolio Page", "3", indent="2") }}


* {{ icon_team }} **Product Website**: Update website (home page,<span tags="m--cs2103"> `Ui.png`,</span> `AboutUs.md` etc.) on GitHub. Ensure the website is auto-published.

{{ embed_topic("tp-deliverables.md#tp-deliverables-website", "Admin " + icon_embedding + " tP → Deliverables → Product Website", "3", indent="2") }}
</span>
{#====================================================================================================================#}
<span id="heading_wrap_up_final_milesone">{{ icon_team }} Wrap up the milestone</span>
<span id="desc_wrap_up_final_milesone">

* As usual, wrap up the milestone on GitHub. Note that the deadline for this is the same for everyone (i.e., does not depend on your tutorial).
</span>
{#====================================================================================================================#}
<span id="heading_demo_the_product">{{ icon_team }} Submit the demo video</span>
<span id="desc_demo_the_product">

<span id="demo-instructions" >

<div class="indented-level2">

<img src="{{baseUrl}}/admin/images/v05demo.png" style="width: 250px"><p/>

{{ embed_topic("tp-deliverables.md#tp-deliverables-demo", "Admin " + icon_embedding + " tP → Deliverables → Demo", "3") }}
<p/>
</div>

<!--
* **Venue:** Same as the tutorial venue unless informed otherwise. You'll be using the TV at your regular tutorial table (not the projector) for the demo.
* **Schedule:** Your demo timing is same as your tutorial time in week 13.
  * Teams `1` and `3` will start at 05-minutes mark (e.g., 11.05 am), and teams `2` and `4` start at 30-minutes mark (e.g., 11.30 am).
  * Please ==arrive _before_ time== and remain outside the venue until called in. Late arrival or absence is liable to a penalty.
  * Any delay in starting the presentation is deducted out of your time allotment %%e.g., if you are scheduled to demo at 11.05-11.23 am (i.e., 18 minutes), you'll have to stop at 11.23 am even if you start at 11.10 am.%%
* You should bring your own adapter if the display adapters available in your tutorial venue don't work for you.
-->
</span>
</span>
{#====================================================================================================================#}
<span id="heading_prepare_for_PE">{{ icon_individual }} Prepare for the practical exam</span>
<span id="desc_prepare_for_PE">

<div class="indented-level2">

<panel type="primary" header="Admin → tP → **PE Overview**" minimized>

<include src="tp-pe.mbdf#pe-overview" />
</panel>
<p/>
<panel type="primary" header="Admin → tP → **PE-D/PE Preparation**" minimized>

<include src="tp-testing.mbdf#testingPreparations" var-pe_active_tab="1"/>
</panel>
</div>
</span>
{#====================================================================================================================#}
<span id="heading_attend_the_PE">{{ icon_individual }} Attend the practical exam</span>
<span id="desc_attend_the_PE">

* Attend the practical test, to be done during the lecture.

{{ embed_topic("tp-pe.md#tp-practicalexam", "Admin " + icon_embedding + " tP → Practical Exam", "3", indent="2") }}
</span>
{#====================================================================================================================#}

{% macro show_tp_page(week_num) %}
{{ show_xp_page(week_num, weekly_tp_tasks['week' + week_num], 'tp-tasks.mbdf') }}
{% endmacro %}
{#====================================================================================================================#}

{% macro show_admin_tp_page(week_num) %}
{% call show_admin_page("tp-w" + week_num) %}
{{ show_tp_page(week_num) }}
{% endcall %}
{% endmacro %}